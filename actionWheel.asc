// new module script

  function setInvPos() {
    int halfHeight = 0;
    int halfWidth = 0;
    int openX = 0;
    int openY = 0;
    // if the ActionWheel is in the top-left quadrant
    if  ((wheelY <= 99) && (wheelX <= 159)){
      invTopRight.Visible = false;
      invTopLeft.Visible = true;
      invBottomLeft.Visible = false;
      invBottomRight.Visible = false;
      halfHeight = gInventory.Height / 3;
      openX = gWheel.X;
      openY = gWheel.Y - halfHeight + 31;
      gInventory.SetPosition(openX, openY);
      gInventory.Visible = true;
    }
    // Top-right quadrant
    else if ((wheelY <= 99) && (wheelX >= 160)) {
      invTopRight.Visible = true;
      invTopLeft.Visible = false;
      invBottomLeft.Visible = false;
      invBottomRight.Visible = false;
      halfHeight = gInventory.Height / 3;
      halfWidth = gInventory.Width / 2;
      openX = gWheel.X - halfWidth - 7;
      openY = gWheel.Y - halfHeight + 31;
      gInventory.SetPosition(openX, openY);
      gInventory.Visible = true;
    }
    // Bottom-Left Quadrant
      else if ((wheelY >= 100) && (wheelX <= 159)) {
      invTopRight.Visible = false;
      invTopLeft.Visible = false;
      invBottomLeft.Visible = true;
      invBottomRight.Visible = false;
      halfHeight = gInventory.Height / 2;
      openX = gWheel.X;
      openY = gWheel.Y - halfHeight + 19;
      gInventory.SetPosition(openX, openY);
      gInventory.Visible = true;
    }
    // Bottom-Right Quadrant
      else if ((wheelY >= 100) && (wheelX >= 160)) {
      invTopRight.Visible = false;
      invTopLeft.Visible = false;
      invBottomLeft.Visible = false;
      invBottomRight.Visible = true;
      halfHeight = gInventory.Height / 2;
      halfWidth = gInventory.Width / 2;
      openX = gWheel.X - halfWidth - 7;
      openY = gWheel.Y - halfHeight + 19;
      gInventory.SetPosition(openX, openY);
      gInventory.Visible = true;
    }
  }
  
function closeInvWindow() {
  gInventory.Visible = false;
  gWheel.Visible = true;
  gAction.Visible = true;
  mouse.DisableMode(eModeLookat);
  mouse.DisableMode(eModeInteract);
  mouse.DisableMode(eModeUseinv);
  mouse.DisableMode(eModePointer);
  mouse.Mode = eModeWalkto;
}

function on_event(EventType event, int data) {
  if (event == eEventAddInventory) {
    player.ActiveInventory = inventory[data];
  }
  else if ((event == eEventLeaveRoom) && (gWheel.Visible == true)) {
    gWheel.Visible = false; 
  }
}

function setLabel() {
if (gWheel.Visible == true) {
    gContext.Visible = true;
    int bannerWidth = GetTextWidth(contextLabel.Text, eFontNotify) + 5;
    int halfBannerWidth = bannerWidth/2;
    gContext.X = gWheel.X - bannerWidth + halfBannerWidth + 33;
    gContext.Y = gWheel.Y + gWheel.Height - 10;
    contextLabelBG.Width = bannerWidth;
    contextLabel.Width = bannerWidth;
    bannerRight.X = bannerWidth +2;
  }
  else if (gWheel.Visible == false) {
    gContext.Visible = false;
  }
}

function setContext() {
  if (GetLocationType(mouse.x,  mouse.y) == eLocationHotspot) {
    contextHotspot = Hotspot.GetAtRoomXY(mouse.x, mouse.y);
    contextLabel.Visible = true;
    contextType = "Hotspot";
  }
  else if (GetLocationType(mouse.x,  mouse.y) == eLocationObject) {
    contextObject = Object.GetAtRoomXY(mouse.x, mouse.y);
    contextLabel.Text = contextObject.Name;
    String objectName = contextObject.Name;
    contextLabel.Visible = true;
    contextType = "Object";
  }
  else if (GetLocationType(mouse.x,  mouse.y) == eLocationCharacter) {
    contextChar = Character.GetAtScreenXY(mouse.x,  mouse.y);
    contextLabel.Text = contextChar.Name;
    contextLabel.Visible = true;
    contextType = "Character";
  }
  else {
    contextLabel.Visible = true;
    contextType = "None";
  }
}

function getAction() {
  // This function gets the text of an Action verb and turns it into text on the Wheel UI
  if (gWheel.Visible == true) {
    // First, figure out what button is under the mouse pointer, if the Wheel UI is visible
    GUIControl*button=GUIControl.GetAtScreenXY(mouse.x,mouse.y);
    
    
    // Because Hotspots, Objects, and Characters are all different things
    // With no unifying API abstractions
    // We're going to have to call each button interaction loop three times, to deal with Types
    // Eventually, I might write a helper function that cuts this down into one loop per button
    // With an abstraction somewhere else
    
    if ((button == wheelLook) && (contextType == "Hotspot")) {
      actionContext = "Look at";
      contextLabel.Text = String.Format("%s %s", actionContext, contextHotspot.Name);
    }
    else if ((button == wheelLook) && (contextType == "Object")) {
      actionContext = "Look at";
      contextLabel.Text = String.Format("%s %s", actionContext, contextObject.Name);
    }
    else if ((button == wheelLook) && (contextType == "Character")) {
      actionContext = "Look at";
      contextLabel.Text = String.Format("%s %s", actionContext, contextChar.Name);
    }
     else if ((button == wheelLook) && (contextType == "None")) {
      actionContext = "Look";
      contextLabel.Text = String.Format("%s", actionContext);
    }
    else if ((button == wheelInteract) && (contextType == "Hotspot")) {
      actionContext = contextHotspot.GetTextProperty("actionVerb");
      contextLabel.Text = String.Format("%s %s", actionContext, contextHotspot.Name);
    }
    else if ((button == wheelInteract) && (contextType == "Object")) {
      actionContext = contextObject.GetTextProperty("actionVerb");
      contextLabel.Text = String.Format("%s %s", actionContext, contextObject.Name);
    }
    else if ((button == wheelInteract) && (contextType == "Character")) {
      actionContext = contextChar.GetTextProperty("actionVerb");
      contextLabel.Text = String.Format("%s %s", actionContext, contextChar.Name);
    }
    else if ((button == wheelInteract) && (contextType == "None")) {
      actionContext = "Use";
      contextLabel.Text = String.Format("%s", actionContext);
    }
    else if ((button == wheelTalk) && (contextType == "Hotspot")) {
      actionContext = "Talk to";
      contextLabel.Text = String.Format("%s %s", actionContext, contextHotspot.Name);
    }
    else if ((button == wheelTalk) && (contextType == "Object")) {
      actionContext = "Talk to";
      contextLabel.Text = String.Format("%s %s", actionContext, contextObject.Name);
    }
    else if ((button == wheelTalk) && (contextType == "Character")) {
      actionContext = "Talk to";
      contextLabel.Text = String.Format("%s %s", actionContext, contextChar.Name);
    }
    else if ((button == wheelTalk) && (contextType == "None")) {
      actionContext = "Talk";
      contextLabel.Text = String.Format("%s", actionContext);
    }
    else if (((button == wheelSelectedInv) || (button == wheelSelectedInvFG)) && (player.ActiveInventory != null) && (contextType == "Hotspot")) {
      actionContext = "Use";
      contextLabel.Text = String.Format("%s %s on %s", actionContext, player.ActiveInventory.Name, contextHotspot.Name);
    }
    else if (((button == wheelSelectedInv) || (button == wheelSelectedInvFG)) && (player.ActiveInventory != null) && (contextType == "Object")) {
      actionContext = "Use";
      contextLabel.Text = String.Format("%s %s on %s", actionContext, player.ActiveInventory.Name, contextObject.Name);
    }
    else if (((button == wheelSelectedInv) || (button == wheelSelectedInvFG)) && (player.ActiveInventory != null) && (contextType == "Character")) {
      actionContext = "Use";
      contextLabel.Text = String.Format("%s %s on %s", actionContext, player.ActiveInventory.Name, contextChar.Name);
    }
    else if (((button == wheelSelectedInv) || (button == wheelSelectedInvFG)) && (player.ActiveInventory != null) && (contextType == "None")) {
      contextLabel.Text = String.Format("%s", player.ActiveInventory.Name);
    }
    else if (button == wheelInv) {
      contextLabel.Text = "Inventory";
    }
    else if (button == wheelSettings) {
      contextLabel.Text = "Settings";
  }
    else if (button == closeWheel) {
      contextLabel.Text = "Close";
    }
  }
}

function setPointer() {
  // if the mouse cursor is in the top-left quadrant
  if  ((mouse.y <= 99) && (mouse.x <= 159)){
    topRightPointer.Visible = false;
    topLeftPointer.Visible = true;
    bottomLeftPointer.Visible = false;
    bottomRightPointer.Visible = false;
    gWheel.SetPosition(mouse.x, mouse.y);
    wheelX = mouse.x;
    wheelY = mouse.y;
  }
  // Top-right quadrant
  else if ((mouse.y <= 99) && (mouse.x >= 160)) {
    topRightPointer.Visible = true;
    topLeftPointer.Visible = false;
    bottomLeftPointer.Visible = false;
    bottomRightPointer.Visible = false;
    gWheel.SetPosition(mouse.x - gWheel.Width, mouse.y);
    wheelX = mouse.x;
    wheelY = mouse.y;
  }
  // Bottom-Left Quadrant
    else if ((mouse.y >= 100) && (mouse.x <= 159)) {
    topRightPointer.Visible = false;
    topLeftPointer.Visible = false;
    bottomLeftPointer.Visible = true;
    bottomRightPointer.Visible = false;
    gWheel.SetPosition(mouse.x,  mouse.y - gWheel.Height);
    wheelX = mouse.x;
    wheelY = mouse.y;
  }
  // Bottom-Right Quadrant
    else if ((mouse.y >= 100) && (mouse.x >= 160)) {
    topRightPointer.Visible = false;
    topLeftPointer.Visible = false;
    bottomLeftPointer.Visible = false;
    bottomRightPointer.Visible = true;
    gWheel.SetPosition(mouse.x - gWheel.Width, mouse.y - gWheel.Height);
    wheelX = mouse.x;
    wheelY = mouse.y;
  }
}

// Test out FloatingHotspot
void AdjustActionBarPosition()
{
 // This could probably be a lot cleaner
  int actionLabelWidth = GetTextWidth(lblAction.Text, eFontNormal) + 4;
  int actionLabelHalf = actionLabelWidth / 2;
  int xpos = mouse.x - actionLabelHalf;
  int ypos = mouse.y - 15;
  
   // Normal Positioning
  if ((mouse.x <= 230)) {
  gAction.X = xpos + 58;
  gAction.Y = ypos + 14;
  gAction.Width = actionLabelWidth;
  lblAction.TextAlignment = eAlignLeft;
  lblShadow.TextAlignment = eAlignLeft;
  lblAction.X = 4;
  lblShadow.X = lblAction.X - 1;
  // Extremely dirty hack
  if ((Mouse.Mode == eModeWalkto) && (noInteraction == false)) {
      Mouse.ChangeModeGraphic(eModeWalkto,  2061);
      Mouse.ChangeModeHotspot(eModeWalkto, 0, 0);
    }
      else if ((noInteraction == true) && (gInventory.Visible == false)) {
      Mouse.Mode = eModeWait;
    }
      else if ((noInteraction == false) && (gInventory.Visible == false))  {
      Mouse.Mode = eModeWalkto;
    }
  }
  
  // Far-right Screen
  else {
  gAction.X = xpos - actionLabelHalf - 3;
  gAction.Y = ypos + 14;
  gAction.Width = actionLabelWidth + 3;
  lblAction.TextAlignment = eAlignRight;
  lblShadow.TextAlignment = eAlignRight;
  lblAction.X = -6;
  lblShadow.X = lblAction.X - actionLabelHalf + 17;
  // Extremely dirty hack
  if ((Mouse.Mode == eModeWalkto) && (noInteraction == false)) {
      Mouse.ChangeModeGraphic(eModeWalkto,  1);
      Mouse.ChangeModeHotspot(eModeWalkto, 11, 0);
    }
      else if ((noInteraction == true) && (gInventory.Visible == false))  {
      Mouse.Mode = eModeWait;
    }
      else if ((noInteraction == false) && (gInventory.Visible == false))   {
      Mouse.Mode = eModeWalkto;
    }
  }
  
}